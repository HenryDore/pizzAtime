/**************************************************************************
IT's MOTHERBLOODY PIZZATIME
Prototype of Crazy Pedros Full Time Pizza Timer
To Dos:
-Fix debounce, use elapsed Millis for this...
-Replace leading zeroes with sprintf? Not sure if faster
-Refactor time keeping to its own subroutine

**************************************************************************/

#include <Wire.h>             //I2C
#include <Adafruit_GFX.h>     //Graphics library
#include <Adafruit_SSD1306.h> //LCD screen driver
#include <elapsedMillis.h>    //non blocking timer for countdown

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'word_pizza', 64x38px image of the word "pizza"
const unsigned char PROGMEM word_pizza[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x7c,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x7c, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x7c,
    0xff, 0xf0, 0x00, 0x38, 0x18, 0xff, 0xfc, 0x7c, 0x7f, 0xf8, 0x0c, 0x7e, 0x3c, 0xff, 0xfc, 0x7c,
    0x3f, 0xfc, 0x3e, 0x7f, 0xfe, 0x7f, 0xfc, 0xf8, 0x3f, 0xfe, 0x3e, 0x7f, 0xfe, 0x3f, 0xf8, 0xf8,
    0x3f, 0xff, 0x3e, 0x7f, 0xfe, 0x0f, 0xf1, 0xf8, 0x3c, 0x3f, 0x3e, 0x3f, 0xfc, 0x1f, 0xe1, 0xf8,
    0x3c, 0x1f, 0x3e, 0x0f, 0xf8, 0x3f, 0xc1, 0xf8, 0x3c, 0x1f, 0x3e, 0x03, 0xf8, 0x3f, 0x83, 0xf8,
    0x3c, 0x1f, 0x3c, 0x03, 0xf0, 0x7f, 0x03, 0xf8, 0x3c, 0x3e, 0x3c, 0x07, 0xf0, 0xff, 0x03, 0xf8,
    0x3c, 0x7e, 0x3c, 0x07, 0xe1, 0xfe, 0x07, 0xf8, 0x3c, 0xfc, 0x7c, 0x0f, 0xe3, 0xfc, 0x07, 0xf8,
    0x39, 0xf8, 0x78, 0x0f, 0xc7, 0xf8, 0x07, 0xf0, 0x7b, 0xf0, 0x78, 0x1f, 0x8f, 0xf0, 0x0f, 0xf0,
    0x7f, 0xe0, 0x78, 0x3f, 0x8f, 0xe0, 0x0f, 0x70, 0x7f, 0xc0, 0x78, 0x3f, 0x1f, 0xc0, 0x1f, 0x30,
    0x7f, 0x80, 0xf0, 0x7f, 0x3f, 0xc0, 0x1e, 0x3c, 0x7f, 0x00, 0xf0, 0x7e, 0x7f, 0x80, 0x1e, 0x7e,
    0x7c, 0x00, 0xf0, 0xfe, 0x7f, 0x00, 0x3f, 0xff, 0xf8, 0x00, 0xe0, 0xfc, 0xfe, 0x00, 0x3f, 0xff,
    0xf0, 0x01, 0xe1, 0xf8, 0xfe, 0x00, 0x3f, 0xfe, 0xf0, 0x01, 0xe1, 0xf9, 0xff, 0xff, 0xff, 0xfc,
    0x70, 0x01, 0xe3, 0xf0, 0xff, 0xff, 0xff, 0xf8, 0x70, 0x01, 0xc3, 0xf0, 0xff, 0xff, 0xff, 0x78,
    0x70, 0x01, 0xc3, 0xe0, 0x3f, 0xf9, 0xf8, 0x78, 0x70, 0x01, 0xc7, 0xe0, 0x00, 0x00, 0xf0, 0x78,
    0x70, 0x01, 0xc7, 0xe7, 0xe0, 0x01, 0xe0, 0x38, 0x70, 0x01, 0xcf, 0xff, 0xf0, 0x01, 0xe0, 0x38,
    0x70, 0x01, 0x8f, 0xff, 0xf0, 0x01, 0xe0, 0x38, 0x70, 0x01, 0x8f, 0xff, 0xe0, 0x03, 0xc0, 0x38,
    0x70, 0x01, 0x87, 0xf8, 0x00, 0x03, 0xc0, 0x38, 0x70, 0x01, 0x83, 0x00, 0x00, 0x01, 0x80, 0x38,
    0x70, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10};

// 'pedro_BMP', 64x69px image of CRAZY PEDRO...
const unsigned char PROGMEM pedro_BMP[] = {
    0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x1f, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x01, 0xf0, 0x1c, 0x00, 0x00,
    0x00, 0x00, 0x3c, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x01, 0xc0, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
    0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
    0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
    0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20,
    0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x41, 0x00, 0x00, 0x01, 0x90,
    0x02, 0x00, 0x00, 0x81, 0x00, 0x00, 0x02, 0x50, 0x02, 0x00, 0x00, 0x80, 0x80, 0x00, 0x1c, 0x28,
    0x02, 0x00, 0x00, 0x80, 0xb6, 0x00, 0x0c, 0x28, 0x04, 0x00, 0x00, 0x40, 0x49, 0x03, 0x88, 0x24,
    0x08, 0x00, 0x00, 0x40, 0x00, 0x82, 0x50, 0x24, 0x30, 0x00, 0x00, 0x20, 0x00, 0x42, 0x20, 0x24,
    0x40, 0x00, 0x00, 0x20, 0xf8, 0x3e, 0x1f, 0x24, 0x60, 0x00, 0x00, 0x22, 0x06, 0x04, 0x20, 0xa0,
    0x30, 0x00, 0x00, 0x1c, 0xf9, 0xf0, 0xbf, 0x30, 0x08, 0x00, 0x00, 0x23, 0xfc, 0x00, 0x7f, 0x88,
    0x08, 0x00, 0x00, 0x2b, 0xfe, 0x62, 0x7f, 0xc4, 0x08, 0x00, 0x00, 0x4f, 0xde, 0x81, 0xfb, 0xd4,
    0x10, 0x00, 0x00, 0x4f, 0x9e, 0x81, 0xfb, 0xe4, 0x10, 0x00, 0x00, 0x4f, 0x9e, 0x81, 0xf3, 0xe4,
    0x10, 0x00, 0x00, 0x4f, 0x8e, 0x85, 0xf0, 0xe4, 0x10, 0x00, 0x00, 0x2b, 0x0e, 0x81, 0xf1, 0xe4,
    0x08, 0x00, 0x00, 0x2b, 0xde, 0x81, 0xfd, 0xf4, 0x08, 0x00, 0x00, 0x4b, 0xde, 0x83, 0x7f, 0xd4,
    0x10, 0x00, 0x00, 0x89, 0xfe, 0x80, 0xff, 0xd2, 0x10, 0x00, 0x00, 0x85, 0xfd, 0x54, 0xbf, 0xd2,
    0x20, 0x00, 0x00, 0x84, 0xf9, 0x1e, 0x5f, 0xa2, 0x20, 0x00, 0x01, 0x02, 0x02, 0x20, 0x2e, 0x62,
    0x20, 0x00, 0x01, 0x01, 0xfd, 0xff, 0x19, 0xe2, 0x20, 0x00, 0x01, 0x00, 0x06, 0x10, 0x80, 0x02,
    0x20, 0x00, 0x01, 0x00, 0x18, 0x1c, 0x40, 0x44, 0x10, 0x00, 0x1d, 0x00, 0x20, 0xe2, 0x20, 0x44,
    0x10, 0x00, 0x23, 0x00, 0x21, 0x1e, 0x10, 0x44, 0x08, 0x00, 0x20, 0x00, 0x42, 0x3c, 0x10, 0x44,
    0x08, 0x00, 0x20, 0x00, 0x42, 0x3f, 0x10, 0x04, 0x08, 0x00, 0x10, 0x00, 0x86, 0x01, 0x88, 0x82,
    0x08, 0x00, 0x10, 0x00, 0x8a, 0x79, 0x48, 0x82, 0x08, 0x00, 0x30, 0x00, 0x91, 0x86, 0x29, 0x04,
    0x08, 0x00, 0x20, 0x01, 0x20, 0x00, 0x2d, 0x04, 0x08, 0x00, 0x20, 0x01, 0x20, 0x00, 0x24, 0x04,
    0x10, 0x00, 0x60, 0x02, 0x20, 0x00, 0x16, 0x04, 0x10, 0x00, 0x80, 0x84, 0x41, 0x00, 0x12, 0x14,
    0x10, 0x01, 0x00, 0xf8, 0x40, 0x80, 0x09, 0x12, 0xf0, 0x00, 0x00, 0x80, 0x80, 0x7c, 0x08, 0xf2,
    0xe0, 0x00, 0x80, 0x81, 0x00, 0x00, 0x0c, 0x13, 0x40, 0x00, 0x80, 0x42, 0x00, 0x00, 0x13, 0x11,
    0x60, 0x00, 0x40, 0x3c, 0x00, 0x00, 0x10, 0xe1, 0x18, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x01,
    0x06, 0x00, 0x18, 0x00, 0x00, 0x00, 0x40, 0x03, 0x02, 0x00, 0x0c, 0x00, 0x20, 0x00, 0x80, 0x02,
    0x02, 0x00, 0x04, 0x00, 0x18, 0x03, 0x00, 0x06, 0x01, 0x00, 0x07, 0xf0, 0x07, 0x9c, 0x00, 0x04,
    0x01, 0x00, 0x18, 0x0c, 0x00, 0x70, 0x00, 0xf8, 0x00, 0xff, 0xe0, 0x03, 0xc1, 0xc0, 0x03, 0x80,
    0x00, 0x0c, 0x00, 0x00, 0x1f, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00};

// 'pizza_BMP', 60x60px image of a pizza....
const unsigned char PROGMEM pizza_BMP[] = {
    0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xe0, 0x00, 0x00,
    0x00, 0x01, 0xc0, 0x06, 0x00, 0x38, 0x00, 0x00, 0x00, 0x07, 0x01, 0xff, 0xf8, 0x0e, 0x00, 0x00,
    0x00, 0x0c, 0x0f, 0x80, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x18, 0x38, 0x00, 0x01, 0xc1, 0x80, 0x00,
    0x00, 0x30, 0xe0, 0x00, 0x00, 0x70, 0xc0, 0x00, 0x00, 0x61, 0x80, 0x00, 0x00, 0x18, 0x20, 0x00,
    0x00, 0xc3, 0x04, 0x03, 0x00, 0x8e, 0x10, 0x00, 0x01, 0x8e, 0x00, 0x00, 0x01, 0x83, 0x18, 0x00,
    0x03, 0x18, 0x00, 0x30, 0x00, 0x01, 0x8c, 0x00, 0x06, 0x10, 0x00, 0x10, 0x00, 0x00, 0xc6, 0x00,
    0x04, 0x30, 0x3c, 0x18, 0x00, 0xf0, 0x42, 0x00, 0x0c, 0x60, 0xff, 0x18, 0x01, 0xb8, 0x63, 0x00,
    0x08, 0xc1, 0x81, 0x80, 0x03, 0x0c, 0x31, 0x00, 0x18, 0x83, 0x00, 0x80, 0x02, 0x0c, 0x11, 0x80,
    0x11, 0x82, 0x00, 0xc0, 0x02, 0x04, 0x18, 0x80, 0x31, 0x06, 0x00, 0x40, 0x02, 0x0c, 0x08, 0xc0,
    0x23, 0x06, 0x00, 0x40, 0x03, 0x18, 0x0c, 0x40, 0x22, 0x06, 0x00, 0x40, 0x01, 0xf0, 0x04, 0x40,
    0x62, 0x06, 0x00, 0x40, 0x00, 0x00, 0x04, 0x60, 0x66, 0x02, 0x00, 0xc0, 0x08, 0x01, 0x84, 0x60,
    0x46, 0x03, 0x01, 0x80, 0x00, 0x01, 0x86, 0x20, 0x44, 0x01, 0xc3, 0x02, 0x00, 0x00, 0x02, 0x20,
    0x44, 0x20, 0xfe, 0x03, 0xc0, 0xc0, 0x02, 0x20, 0xc4, 0x38, 0x00, 0x00, 0x00, 0xf0, 0x02, 0x30,
    0xc4, 0x18, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0xcc, 0x00, 0x00, 0x40, 0x00, 0x00, 0x83, 0x30,
    0xcc, 0x00, 0x30, 0x40, 0x00, 0x00, 0x83, 0x30, 0xc4, 0x00, 0x60, 0x00, 0x00, 0x00, 0x82, 0x30,
    0xc4, 0x00, 0xc0, 0x00, 0x00, 0x01, 0x82, 0x30, 0x44, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x02, 0x20,
    0x44, 0x00, 0x0e, 0x00, 0x07, 0xf8, 0x02, 0x20, 0x46, 0x10, 0x3f, 0x82, 0x0c, 0x0c, 0x06, 0x20,
    0x66, 0x10, 0x60, 0xc2, 0x08, 0x06, 0x06, 0x60, 0x62, 0x00, 0xc0, 0xc2, 0x18, 0x06, 0x04, 0x60,
    0x22, 0x00, 0x80, 0x42, 0x10, 0x02, 0x04, 0x40, 0x23, 0x00, 0x80, 0x60, 0x10, 0x02, 0x0c, 0x40,
    0x31, 0x00, 0x80, 0x40, 0x10, 0x02, 0x08, 0xc0, 0x11, 0x80, 0xc0, 0x40, 0x18, 0x06, 0x18, 0x80,
    0x18, 0x88, 0x60, 0xc0, 0x08, 0x04, 0x11, 0x80, 0x08, 0xc0, 0x3f, 0x80, 0x0e, 0x0c, 0x31, 0x00,
    0x0c, 0x60, 0x1e, 0x00, 0x03, 0xf8, 0x63, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0xc0, 0xc2, 0x00,
    0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x03, 0x18, 0x00, 0x08, 0x30, 0x01, 0x8c, 0x00,
    0x01, 0x8e, 0x00, 0x0c, 0x30, 0x07, 0x18, 0x00, 0x00, 0xc3, 0x02, 0x06, 0x00, 0x0c, 0x30, 0x00,
    0x00, 0x61, 0x80, 0x00, 0x00, 0x18, 0x60, 0x00, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x70, 0xc0, 0x00,
    0x00, 0x18, 0x38, 0x00, 0x01, 0xc1, 0x80, 0x00, 0x00, 0x0c, 0x0f, 0x80, 0x1f, 0x03, 0x00, 0x00,
    0x00, 0x07, 0x01, 0xff, 0xf8, 0x0e, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x06, 0x00, 0x38, 0x00, 0x00,
    0x00, 0x00, 0x70, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x0f, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00};

//slice coordinates for drawing triangles
/*
uint16_t sC[8][6] = {
    {30, 29, 30, 0, 59, 0},
    {30, 29, 59, 0, 59, 29},
    {30, 30, 59, 30, 59, 59},
    {30, 30, 59, 59, 30, 59},
    {29, 30, 29, 59, 0, 59},
    {29, 30, 0, 59, 0, 30},
    {29, 29, 0, 29, 0, 0},
    {29, 29, 0, 0, 29, 0}};
*/
uint16_t sC[8][6] = {
    {32, 29, 32, 0, 61, 0},
    {32, 29, 61, 0, 61, 29},
    {32, 30, 61, 30, 61, 59},
    {32, 30, 61, 59, 32, 59},
    {31, 30, 31, 59, 2, 59},
    {31, 30, 2, 59, 2, 30},
    {31, 29, 2, 29, 2, 0},
    {31, 29, 2, 0, 31, 0}};

elapsedMillis countdown_timer;
elapsedMillis button_debounce_timer;

int delay_speed = 50;
int countdown_remaining_time;
int L_buttonState = 0;
int M_buttonState = 0;
int R_buttonState = 0;
int system_state = 0;
bool state_initialised = 0;
int current_menu_option = 0; // 0 = select time, 1 = start
int debouce_millis = 250;
int countdown_target = 15;
int countdown_minutes;
int countdown_seconds;

const int L_ButtonPin = 7; // the number of the pushbutton pin
const int M_ButtonPin = 8; // the number of the pushbutton pin
const int R_ButtonPin = 9; // the number of the LED pin

void setup()
{
    pinMode(L_ButtonPin, INPUT);
    pinMode(R_ButtonPin, INPUT);
    //Serial.begin(9600);

    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
    {
        //Serial.println(F("SSD1306 allocation failed"));
        for (;;)
            ; // Don't proceed, loop forever
    }
    display.setRotation(1);
    display.setTextColor(WHITE);
    display.setTextSize(2);

    //intro disable to speed up development...
    //displayIntro();

    system_state = 1; //loaded
}

void loop()
{
    get_button_states();

    if (system_state == 1)
    {
        system_state_1();
    }
    else if (system_state == 2)
    {
        system_state_2();
    }
    else if (system_state == 3)
    {
        system_state_3();
    }
    else
    {
        //do nothing
    }

    delay(10); //system refresh speed
}

void displayIntro()
{
    display.clearDisplay();
    display.drawBitmap(2, 0, pizza_BMP, 60, 60, 1);
    display.display();
    delay(500);

    for (int i = 0; i < 8; i++) //Black out all 8 pizza slices in order...
    {
        display.fillTriangle(sC[i][0], sC[i][1], sC[i][2], sC[i][3], sC[i][4], sC[i][5], BLACK);
        display.display();
        delay(delay_speed);
    }

    delay(500);

    display.drawBitmap(0, 0, pedro_BMP, 64, 69, 1);
    display.setTextColor(WHITE);
    display.setTextSize(2);

    for (int i = 0; i < 6; i++) //Flash the word PIZZA!
    {
        display.setCursor(4, 66);
        display.print("PIZZA");
        display.display();
        delay(50);
        display.fillRect(0, 65, 64, 15, BLACK);
        display.display();
        delay(50);
    }

    display.clearDisplay();
    display.display();
    delay(1000);
}

void system_state_1() //main menu
{
    if (state_initialised == 0)
    {
        display.setTextSize(1);
        display.clearDisplay();
        display.drawBitmap(0, 0, word_pizza, 64, 38, 1);
        display.display();
        state_initialised = 1;
    }
    else
    {
        //do nothing
    }

    if (M_buttonState == HIGH)
    {
        system_state = 3;
        state_initialised = 0;
    }
    if (L_buttonState == HIGH)
    {
        display.setCursor(4, 100);
        display.print("Left btn");
        display.display();
        display.fillRect(0, 65, 64, 128, BLACK);
        display.display();
    }
    if (R_buttonState == HIGH)
    {
        display.setCursor(4, 100);
        display.print("Right btn");
        display.display();
        display.fillRect(0, 65, 64, 128, BLACK);
        display.display();
    }
}

void system_state_2() //select time
{
    if (state_initialised == 0)
    {
        state_initialised = 1;
    }
    else
    {
        //do nothing
    }

    if (L_buttonState == HIGH)
    {
    }
    if (R_buttonState == HIGH)
    {
    }
}

void system_state_3() //counting down
{
    if (state_initialised == 0)
    {
        display.clearDisplay();
        display.setTextSize(2);
        display.setCursor(4, 64);
        countdown_minutes = countdown_target / 60;
        countdown_seconds = countdown_target % 60;
        if (countdown_minutes < 10)
        {
            display.print("0");
        }
        display.print(countdown_minutes);
        display.print(":");
        if (countdown_seconds < 10)
        {
            display.print("0");
        }
        display.print(countdown_seconds);
        display.drawBitmap(2, 0, pizza_BMP, 60, 60, 1);
        display.display();
        for (int i = 0; i < 8; i++) //Black out all 8 pizza slices in order...
        {
            display.fillTriangle(sC[i][0], sC[i][1], sC[i][2], sC[i][3], sC[i][4], sC[i][5], BLACK);
            display.display();
            delay(25);
        }
        display.drawBitmap(2, 0, pizza_BMP, 60, 60, 1);
        display.display();
        state_initialised = 1;
        L_buttonState = false;
        countdown_timer = 0;
    }
    else
    {
        //do nothing
    }

    countdown_remaining_time = (countdown_target)-countdown_timer / 1000;
    if (countdown_remaining_time < 0)
    {
        displayIntro();
        displayIntro();
        countdown_target = 6000;
        system_state = 1; //loaded
        state_initialised = 0;
    }
    else
    {
        countdown_minutes = countdown_remaining_time / 60;
        countdown_seconds = countdown_remaining_time % 60;
        display.fillRect(0, 64, 64, 94, BLACK);
        display.setCursor(4, 64);
        if (countdown_minutes < 10)
        {
            display.print("0");
        }
        display.print(countdown_minutes);
        display.print(":");
        if (countdown_seconds < 10)
        {
            display.print("0");
        }
        display.print(countdown_seconds);
        display.display();

        if (M_buttonState == HIGH)
        {
            system_state = 1;
            state_initialised = 0;
        }
        if (L_buttonState == HIGH)
        {
            countdown_target = countdown_target - 60;
        }
        if (R_buttonState == HIGH)
        {
            countdown_target = countdown_target + 60;
        }
    }
}

void get_button_states()
{
    if (button_debounce_timer > 500)
    {
        L_buttonState = digitalRead(L_ButtonPin);
        M_buttonState = digitalRead(M_ButtonPin);
        R_buttonState = digitalRead(R_ButtonPin);

        if (L_buttonState == true || M_buttonState == true || R_buttonState == true)
        {
            button_debounce_timer = 0;
        }
    }
    else
    {
        L_buttonState = false;
        M_buttonState = false;
        R_buttonState = false;
    }
}